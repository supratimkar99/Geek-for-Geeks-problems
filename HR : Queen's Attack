//You will be given a square chess board with one queen and a number of obstacles placed on it.
//Determine how many squares the queen can attack.

public class Solution
{
    static int queensAttack(int n, int k, int r_q, int c_q, int[][] obstacles)
    {
        int cnt=0;
        int rd_d,rd_u,ld_d,ld_u,r_r,r_l,c_u,c_d;
        c_u = r_q - 1;
        c_d = n - r_q;
        r_l = c_q - 1;
        r_r = n - c_q;
        rd_d = Math.min(n - r_q,n - c_q);
        rd_u = Math.min(r_q - 1,c_q - 1);
        ld_d = Math.min(r_q - 1,n - c_q);
        ld_u = Math.min(n - r_q,c_q - 1);
        for(int i=0; i<k; i++)
        {
            int row = obstacles[i][0];
            int column = obstacles[i][1];
            if(row == r_q)
            {
                if(column>c_q)
                    r_r = Math.min(r_r,column - c_q - 1);
                else
                    r_l = Math.min(r_l,c_q - column - 1);
            }
            else if(column == c_q)
            {
                if(row>r_q)
                    c_d = Math.min(c_d,row - r_q - 1);
                else
                    c_u = Math.min(c_u,r_q - row - 1);
            }
            else if(Math.abs(r_q - row)==Math.abs(c_q - column))
            {
                if(row > r_q)
                {
                    if(column > r_q)
                        rd_d = Math.min(rd_d,Math.min(row - r_q - 1,column - c_q - 1));
                    else
                        ld_u = Math.min(ld_u,Math.min(row - r_q - 1,c_q - column - 1));
                }
                else
                {
                    if(column > r_q)
                        ld_d = Math.min(ld_d,Math.min(r_q - row - 1,column - c_q - 1));
                    else
                        rd_u = Math.min(rd_u,Math.min(r_q - row - 1,c_q - column - 1));
                }
            }
        }
        cnt = c_u + c_d + r_l + r_r + ld_u + ld_d + rd_u + rd_d;
        return cnt;
    }
}
